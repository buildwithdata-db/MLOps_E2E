# This is a basic workflow to help you get started with Actions

name: MLOps Github Actions

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    tags-ignore:
      - '*.*'
    paths-ignore:
      - 'README.md' # if we change documentation only, we don't need to run tests
  pull_request:
    branches: [ main ]
    tags-ignore:
      - '*.*'
    paths-ignore:
      - 'README.md' # if we change documentation only, we don't need to run tests

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST_STG }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_STG }}
      

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # expose teh slug/short values github variables inside the workflow
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # cache the libraries
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            ${{ runner.os }}-pip-

      - name: Install pip
        run: |
          python -m pip install --upgrade pip
          
      - name: Install dependencies
        env:
          repo_url: 'https:////github.com//${{ env.GITHUB_REPOSITORY_OWNER_PART}}//${{ env.GITHUB_REPOSITORY_NAME_PART}}.git'
        run: |
          pip install -r requirements.txt
          env
          echo $repo_url

      - name: Check Repo already exists
        id: check-repo
        run: databricks repos get --path /Repos/MLOps_Staging/MLOps_notebooks
        continue-on-error: true

      - name: Create Repos
        if: steps.check-repo.outcome == 'failure'
        run: databricks repos create --path=/Repos/MLOps_Staging/MLOps_notebooks --url ${{ env.repo_url }}

      - name: Update Repos
        run: databricks repos update --path=/Repos/MLOps_Staging/MLOps_notebooks --branch=${{ env.GITHUB_REF_SLUG }}

      # - name: Deploy the code and launch integration tests
      #   run: |
      #     databricks -v
      #     env
      #     databricks workspace ls
      #     databricks repos get --path /Repos/DevOps_Staging/databricks-nutter-projects-demo1 | grep 
      #     getRepoResult=$?
      #     echo $getRepoResult

      # export DATABRICKS_HOST = "https://adb-984752964297111.11.azuredatabricks.net"
      # export DATABRICKS_TOKEN = ${{ env.DATABRICKS_TOKEN }}
          
      #dbx deploy --files-only --no-rebuild --deployment-file=conf/staging.json --no-package
      #dbx launch --job=nutter-testing-suite --as-run-submit --trace